/*
 * ----------------------
 * FibonacciHeapNode.java
 * ----------------------
 * Class to be used by FibonacciHeap. In this case the 'key' will be the parameter
 * we want to store - so it will be correspondent to the '<T> data' represented
 * in the jgraph library.
 */
package Utilities;

/**
 *
 * @author nuno
 */
public class FibonacciHeapNode<T> {

    FibonacciHeapNode left;
    FibonacciHeapNode right;
    FibonacciHeapNode parent;
    FibonacciHeapNode child;
    boolean mark;
    int degree;
    int key;
    T data;

    public FibonacciHeapNode(T data, int k) {
        this.key = k;
        this.right = this;
        this.left = this;
        this.data = data;
    }

    public int getKey() {
        return key;
    }

    public T getData() {
        return data;
    }

    @Override
    public String toString() {
        if (true) {
            return Integer.toString(key);
        } else {
            StringBuilder buf = new StringBuilder();
            buf.append("Node=[parent = ");

            if (parent != null) {
                buf.append(Integer.toString(parent.key));
            } else {
                buf.append("---");
            }

            buf.append(", key = ");
            buf.append(Integer.toString(key));
            buf.append(", degree = ");
            buf.append(Integer.toString(degree));
            buf.append(", right = ");

            if (right != null) {
                buf.append(Integer.toString(right.key));
            } else {
                buf.append("---");
            }

            buf.append(", left = ");

            if (left != null) {
                buf.append(Integer.toString(left.key));
            } else {
                buf.append("---");
            }

            buf.append(", child = ");

            if (child != null) {
                buf.append(Integer.toString(child.key));
            } else {
                buf.append("---");
            }

            buf.append(']');

            return buf.toString();
        }
    }

    /*
     * Generated by NetBeans...
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final FibonacciHeapNode<T> other = (FibonacciHeapNode<T>) obj;
        if (this.left != other.left && (this.left == null || !this.left.equals(other.left))) {
            return false;
        }
        if (this.right != other.right && (this.right == null || !this.right.equals(other.right))) {
            return false;
        }
        if (this.parent != other.parent && (this.parent == null || !this.parent.equals(other.parent))) {
            return false;
        }
        if (this.child != other.child && (this.child == null || !this.child.equals(other.child))) {
            return false;
        }
        if (this.mark != other.mark) {
            return false;
        }
        if (this.degree != other.degree) {
            return false;
        }
        if (this.key != other.key) {
            return false;
        }
        if (this.data != other.data && (this.data == null || !this.data.equals(other.data))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 61 * hash + (this.left != null ? this.left.hashCode() : 0);
        hash = 61 * hash + (this.right != null ? this.right.hashCode() : 0);
        hash = 61 * hash + (this.parent != null ? this.parent.hashCode() : 0);
        hash = 61 * hash + (this.child != null ? this.child.hashCode() : 0);
        hash = 61 * hash + (this.mark ? 1 : 0);
        hash = 61 * hash + this.degree;
        hash = 61 * hash + this.key;
        hash = 61 * hash + (this.data != null ? this.data.hashCode() : 0);
        return hash;
    }

    
}
